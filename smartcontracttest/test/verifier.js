const Verifier = artifacts.require("Verifier");

contract("Verifier", async (accounts) => {

  const OWNER = accounts[0];
  const USER1 = accounts[1];

  let verifier;

  beforeEach(async () => {
    verifier = await Verifier.new();
  })

  // For test # 7, Test 7 - Cpt1 Quote: 93 - Cpt2 Quote: 98 - Cpt3 Quote: 94 
  it("should return true when verify a circuit with correct parameters", async () => {
    const a = ["19986148086063669699393915079219583317329018538179236390727851645992144476866", "13682626214479896181683270627421909231653527134440534352941182839979684448830"];
    const b = [["8017990115629714788408349539373847722278669393385246509276060871476546936025", "10044393139179782637581056892901214920202033065412504846830312795276459180029"], ["3020854123064922622006786076353895345636505020901596918782702925277852733843", "20259921310291782748993532633540243325455234979510919682561336433871599548245" ]];
    const c = ["13333365266330820947505440623816411509963076763256319480287872577286148696959", "16566510220317667645820953733616510200743130108935180775413625726122874052290"];
    const input = ["144150000", "14292231080600738336861785758757520919175042210184971911109426456066055870844", "11951111245666996101209607007545688570099935146828982432887196559333543373291", "3917574926939705075517322834801081544", "247744458975022206188804542936105720871", "17143312592640665336322620800845178018028740478952681712767569796537693396812", "17569980102909044676256001479640411087334772294425842357847622915410385256152", "16064172840511130396163153362052637886735597901465909198781807716229556844248", "20145565086840628487646378555659304143430966406145099422862446733209566497019", "1222478948104308973363576344223801957645431502116912142134557107398837356924", "11149480284076626963282053785587761751146600894461318988418480014122904346043", "6612373535961598771650885752291845037020624862878415527266403582563356930501"]
    
    const result = await verifier.verifyProof(a,b,c,input);
    assert.equal(true, result);
  });

  it("should return false when verify a circuit with incorrect parameters", async () => {
    const a = ["19986148086063669699393915079219583317329018538179236390727851645992144476866", "13682626214479896181683270627421909231653527134440534352941182839979684448830"];
    const b = [["8017990115629714788408349539373847722278669393385246509276060871476546936025", "10044393139179782637581056892901214920202033065412504846830312795276459180029"], ["3020854123064922622006786076353895345636505020901596918782702925277852733843", "20259921310291782748993532633540243325455234979510919682561336433871599548245" ]];
    const c = ["13333365266330820947505440623816411509963076763256319480287872577286148696959", "16566510220317667645820953733616510200743130108935180775413625726122874052290"];
    const input = ["244150000", "14292231080600738336861785758757520919175042210184971911109426456066055870844", "11951111245666996101209607007545688570099935146828982432887196559333543373291", "3917574926939705075517322834801081544", "247744458975022206188804542936105720871", "17143312592640665336322620800845178018028740478952681712767569796537693396812", "17569980102909044676256001479640411087334772294425842357847622915410385256152", "16064172840511130396163153362052637886735597901465909198781807716229556844248", "20145565086840628487646378555659304143430966406145099422862446733209566497019", "1222478948104308973363576344223801957645431502116912142134557107398837356924", "11149480284076626963282053785587761751146600894461318988418480014122904346043", "6612373535961598771650885752291845037020624862878415527266403582563356930501"]
    
    const result = await verifier.verifyProof(a,b,c,input);
    assert.equal(false, result);
  });

});